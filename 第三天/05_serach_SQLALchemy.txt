"""
	从04_db_deom的SQLALchemy插入到mysql数据库的查询数据库操作
	以下皆是演示，具体看操作说明
"""

# 从Role模型类中查询多条数据
li = Role.query.all()
li[0] 第一条

# 从Role模型类中查询首条数据
r = Role.query.first()
r.name # 显示角色名称

# 根据主键id获取对象
r = Role.query.get[2]  # id为2
r.name

# 第二种方式，从表对应的模型类查询，效果一样，更原始
db.session.query(Role).all()  # 查询Role模型
db.session.query(Role).get[1]  # Role中id为1

# 通过过滤，查询需要的数据信息
# filter_by:严格按照给定条件查询
User.query.filter_by(name="chen")  取出来的是 查询对象
User.query.filter_by(name="chen").all()  取出来的是，查询列表对象地址
User.query.filter_by(name="chen").first()  取出来的是，查询一条数据对象地址
user = User.query.filter_by(name="chen").first() 创建user
user.name  # user取值，取name

# 添加多个条件
User.query.filter_by(name="chen", role_id=1).first()

# 如果查询值不存在，不会抛出异常，可以使用type(user)，查看到NoneType
user = User.query.filter_by(name="chen", role_id=22).first()
type(user)  # 如果查询值不存在，显示NoneType

# filter：万能查询法
user = User.query.filter_by(name="chen", role_id=22).first()
# 对比一下
user = User.query.filter(User.name=="chen", User.role_id==1).first()

form sqlalchemy import or_  导入sql查询的or方法
# or_方法：查询name是chen或者email包含163.com的数据，or_()把要查询的小括号包
li = User.query.filter(or_(User.name=="chen", User.email.endwith("163.com))).all()

# offset()偏移，跳过几条数据信息
li = User.query.offset(2).all() 跳过前两条，从第三条数据开始取值
li[1]  取的是第三条数据

# limit()限定取几条
# 跳过前一条，限定取两条，必须带上.all()，表示取值
li = User.query.offset(1).limit(2).all()

# order_by 排序
# 第一张方式              按照-id降序排列
li = User.query.order_by("-id").all()

# 第二种官方 建议使用这种排序方式
li = User.query.order_by(User.id.desc()).all() # desc()降序
li = User.query.order_by(User.id.esc()).all()  # esc()升序，默认就是升序

# grounp_by：分组查询
from sqlalchemy import func
导入的func模块，可以让分组查询使用.count()计算总数/.min/max/average等等
# 查询User表按照role_id分组，查询role_id和统计role_id的次数
db.session.query(User.role_id, func.count(User.role_id)).group_by(User.role_id)


# 关联查询，从Role模型类中，查询user信息
ro = Role.query.get(1)
ro.user[1].name  --> 返回User表中的第一个信息的名字
ro.user[2].name  --> 返回第二个信息的名字

# 查询User模型类中，对应的Role对象信息
user = User.query.get(1)
user.role_id    --> 返回外键1L

# 如果Role模型要指明backref="role"，这样操作查询会更简单
users = db.relationship("user", backref="role")
# 查询语句为：user.role
user.role.name  --> 用户的角色名字

# 如果未指明backref， 那需要多执行一步
Role.query.get(user.role_id)


# 修改更新的两种方式：
# 先查询出，再赋值，再add，在commit提交
user = User.query.get(1)
user.name = "python"
db.session.add(user)
db.session.commit()

# 方式二
User.query.filter_by(name="chen").update({"name":"python", "email":"python@qq.com"})
db.session.commit()


# 删除操作
# 先get拿到，在数据库delete删除，最后提交
user = User.query.get(2)
db.session.delete(user)
db.session.commit()



